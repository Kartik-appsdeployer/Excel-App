import tkinter as tk
from tkinter import filedialog
import pandas as pd
import openpyxl
from tkinter.font import Font
import sys
import math
import os

if getattr(sys, 'frozen', False):
    # For executable generated by PyInstaller or cx_Freeze
    script_dir = sys._MEIPASS
else:
    # For running the script directly
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
file_path1 = ""

def select_file():
    global file_path1
    file_path1 = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
    if file_path1:
        process_file(file_path1)


def process_file(file_path):
    df = pd.read_excel(file_path)
    row_index1 = df['Code']
    hours = df['hours']
    minutes = df['minutes']
    seconds = df['seconds']
    miliseconds = df['miliseconds']
    RMARK = df['RMARK']
    Ot = df['Ot']
    tot_d = df['tot d']
    LATE = df['LATE']
    esic = df['esic']

    row_index2 = df['EmpName']
    data = {
        'Code': [],
        'EmpName': [],
        'OT Status': [],
        'Dept.': [],
        'Date': [],
        'hours': [],
        'minutes': [],
        'seconds': [],
        'miliseconds': [],
        'RMARK': [],
        'WrkdHrs': [],
        'Ot': [],
        'pr d': [],
        'PH': [],
        'WO': [],
        'appl leave': [],
        'abs': [],
        'LATE': [],
        'esic': [],
    }

    df1 = pd.DataFrame(data)
    OtStatus = []
    Department = []
    Date = []
    WrkdHrs = []
    presentDays = []
    PH = []
    WO = []
    appl_leave = []
    abs = []
    output_file_path = os.path.join(os.path.dirname(file_path), 'new_file.xlsx')
    # Date range logic
    date_array = []
    start_date = pd.to_datetime('2023-12-01')
    end_date = pd.to_datetime('2023-12-31')
    date_range = pd.date_range(start=start_date, end=end_date)
    date_array.extend([date.strftime('%d/%m/%Y') for date in date_range])
    # Date range logic

    df1.to_excel(output_file_path, index=False)
    j = 0
    for i in range(len(row_index1) - 1):
        if i != len(row_index1):
            if row_index1[i] == row_index1[i + 1]:
                OtStatus.append("NOT")
                Department.append("Service")
                Date.append(date_array[j])
                j += 1
                if RMARK[i] == 'WO' or RMARK[i] == 'APPL' or RMARK[i] == 'ABS':
                    presentDays.append(0)
                else:
                    presentDays.append(1)
                if RMARK[i] == 'PH':
                        PH.append(1)
                else:
                    PH.append(0)
                if RMARK[i] == 'WO':
                    WO.append(1)
                else:
                    WO.append(0)
                if RMARK[i] == 'APPL':
                    appl_leave.append(1)
                else:
                    appl_leave.append(0)
                if RMARK[i] == 'ABS':
                    abs.append(1)
                else:
                    abs.append(0)
                    
            else:
                OtStatus.append("")
                row_index2[i] = row_index2[i]
                Department.append("")
                Date.append("")
                j = 0
                
                presentDays.append(sum(presentDays[i - 31:i]))
                PH.append(sum(PH[i - 31:i]))
                WO.append(sum(WO[i - 31:i]))
                appl_leave.append(sum(appl_leave[i - 31:i]))
                abs.append(sum(abs[i - 31:i]))
                
            # print(i)
            

    OtStatus.append('')
    Department.append("")
    Date.append("")
    presentDays.append("")
    PH.append("")
    WO.append("")
    appl_leave.append("")
    abs.append("")

    # Worked Hours Logic
    for i in range(len(hours)):
        if math.isnan(hours[i]) == False and math.isnan(minutes[i])  == False and math.isnan(seconds[i]) == False and math.isnan(miliseconds[i]) == False:
            try:
                Num = ((seconds[i] * 60 + miliseconds[i]) - (hours[i] * 60 + minutes[i])) / 60
                WrkdHrs.append(round(Num, 2))
            except Exception as e:
                error_index = i
                print(f"Error occurred at index {error_index}: {e}")
                break
        else:
            WrkdHrs.append("")
        # print(hours[i])
    # Worked Hours Logic

    df1['Code'] = row_index1
    df1['EmpName'] = row_index2
    df1['OT Status'] = OtStatus
    df1['Dept.'] = Department
    df1['Date'] = Date
    df1['hours'] = hours
    df1['minutes'] = minutes
    df1['seconds'] = seconds
    df1['miliseconds'] = miliseconds
    df1['RMARK'] = RMARK
    df1['WrkdHrs'] = WrkdHrs
    df1['Ot'] = Ot
    df1['tot d'] = tot_d
    df1['pr d'] = presentDays
    df1['PH'] = PH
    df1['WO'] = WO
    df1['appl leave'] = appl_leave
    df1['abs'] = abs
    df1['LATE'] = LATE
    df1['esic'] = esic
    df1.to_excel(output_file_path, index=False)
    success_label.config(text="new_file.xlsx generated successfully!")

def download_output():
    initial_file_name = "new_file.xlsx"
    output_file_path = os.path.join(os.path.dirname(file_path1), 'new_file.xlsx')
    save_file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")],
                                                 initialfile=initial_file_name)
    if save_file_path:
        os.replace(output_file_path, save_file_path)


if __name__ == "__main__":
    window = tk.Tk()
    window.geometry("500x300")
    heading_label = tk.Label(window, text="Excel file converter", font=("Arial", 16, "bold"))
    heading_label.pack()
    heading_font = Font(family="Arial", size=16, weight="bold")
    button = tk.Button(window,
    text="Select file", cursor="hand1",
    compound="top",
    font=heading_font,
    padx=10,
    pady=5,
    bd=0,
    bg="lightblue",
    fg="white",
    command=select_file,
    border="1")
    button.pack()
    
    download_button = tk.Button(window, text="Download Excel file", command=download_output,font=heading_font,
    padx=10,
    pady=5,
    bd=0,
    bg="lightblue",
    fg="white", cursor="hand1")
    download_button.pack()
    success_label = tk.Label(window, text="", fg="green")
    success_label.pack()
    window.mainloop()
